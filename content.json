{"pages":[],"posts":[{"title":"django模版与过滤器","text":"12345678910111213141516171819202122&lt;div class=\"cart\"&gt; &lt;Header/&gt; &lt;div class=\"cart-info\"&gt; &lt;h3 class=\"cart-top\"&gt;购物车结算 &lt;span&gt;共{{course_list.length}}门课程&lt;/span&gt;&lt;/h3&gt; &lt;div class=\"cart-title\"&gt; &lt;el-row&gt; &lt;el-col :span=\"2\"&gt;&amp;nbsp;&lt;/el-col&gt; &lt;el-col :span=\"10\"&gt;课程&lt;/el-col&gt; &lt;el-col :span=\"8\"&gt;有效期&lt;/el-col&gt; &lt;el-col :span=\"4\"&gt;价格&lt;/el-col&gt; &lt;/el-row&gt; &lt;/div&gt; &lt;div class=\"cart-item\"&gt; &lt;el-row :key=\"key\" v-for=\"course,key in course_list\"&gt; &lt;el-col :span=\"2\" class=\"checkbox\"&gt;&amp;nbsp;&amp;nbsp;&lt;/el-col&gt; &lt;el-col :span=\"10\" class=\"course-info\"&gt; &lt;img :src=\"$settings.Host+course.course_img\" alt=\"\"&gt; &lt;span class=\"course-title\"&gt;{{course.name}}&lt;br&gt;{{course.discount_name}}&lt;/span&gt; &lt;/el-col&gt; &lt;el-col :span=\"8\"&gt;&lt;span&gt;{{course.expire}}&lt;/span&gt;&lt;/el-col&gt; &lt;el-col :span=\"4\" class=\"course-price\"&gt;¥{{course.discount_price}}&lt;br&gt;&lt;span&gt;原价 ¥{{course.price.toFixed(2)}}&lt;/span&gt;&lt;/el-col&gt; &lt;/el-row&gt;","link":"/2019/07/09/aa/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/01/04/hello-world/"},{"title":"数据分析","text":"什么是数据分析 是把隐藏在一些看似杂乱无章的数据背后的信息提炼出来，总结出所研究对象的内在规律 数据分析是用适当的方法对收集来的大量数据进行分析，帮助人们做出判断，以便采取适当的行动 商品采购量的多少 总部向各个地区代理的发货量 …… 数据分析实现流程 提出问题 准备数据 分析数据 获得结论 成果可视化 数据分析三剑客 numpy pandas matplotlib numpy模块：一维或者是多维的数组（低版本的列表） NumPy(Numerical Python) 是 Python 语言中做科学计算的基础库。重在于数值计算，也是大部分Python科学计算库的基础，多用于在大型、多维数组上执行的数值运算。 numpy的创建 使用np.array()创建 使用plt创建 使用np的routines函数创建 使用array()创建一个一维数组 123import numpy as nparr = np.array([1,2,3,4,5,6])arr array([1, 2, 3, 4, 5, 6]) 使用array()创建一个多维数组 1np.array([[1,2,3,4],[5,6,7,8],[9,9,9,9]]) array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 9, 9, 9]]) 数组和列表的区别是什么？ 数据中存储的数组元素的数据类型必须是统一 数据类型是有优先级： str&gt;float&gt;int 12arr = np.array([1,2.2,3,4,5,6])arr array([1. , 2.2, 3. , 4. , 5. , 6. ]) 将外部的一张图片读取加载到numpy数组中，然后尝试改变数组元素的数值查看对原始图片的影响 123import matplotlib.pyplot as pltimg_arr = plt.imread('./assets/1.jpg')plt.imshow(img_arr) &lt;matplotlib.image.AxesImage at 0x16e9faebb70&gt; 1plt.imshow(img_arr-100) &lt;matplotlib.image.AxesImage at 0x16eb3240dd8&gt; zeros() ones() linespace() arange() random系列 1np.zeros((3,4)) array([[0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]])1np.linspace(0,100,num=20) array([ 0. , 5.26315789, 10.52631579, 15.78947368, 21.05263158, 26.31578947, 31.57894737, 36.84210526, 42.10526316, 47.36842105, 52.63157895, 57.89473684, 63.15789474, 68.42105263, 73.68421053, 78.94736842, 84.21052632, 89.47368421, 94.73684211, 100. ])1np.arange(0,100,step=3) array([ 0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99])1np.random.randint(0,100,size=(5,6)) array([[71, 76, 47, 11, 7, 6], [47, 89, 70, 44, 41, 96], [58, 42, 36, 53, 49, 55], [13, 32, 64, 58, 15, 7], [78, 56, 40, 71, 45, 63]])1np.random.random((3,4)) array([[0.24913375, 0.91988476, 0.36386714, 0.58404557], [0.15544885, 0.73892461, 0.82189615, 0.80368295], [0.07230386, 0.45535116, 0.75370029, 0.03377829]]) 随机性： 随机因子：x(时间) 123#固定随机性np.random.seed(10)np.random.randint(0,100,size=(5,6)) array([[ 9, 15, 64, 28, 89, 93], [29, 8, 73, 0, 40, 36], [16, 11, 54, 88, 62, 33], [72, 78, 49, 51, 54, 77], [69, 13, 25, 13, 92, 86]])numpy的常用属性 shape ndim size dtype 12345img_arr.shapeimg_arr.ndimimg_arr.sizeimg_arr.dtypetype(img_arr) numpy.ndarray1arr = np.array([1,2,3],dtype='uint8') numpy的数据类型 array(dtype=?):可以设定数据类型 arr.dtype = ‘?’:可以修改数据类型 1arr = np.array([1,2,3]) 1arr.dtype = 'int32' numpy的索引和切片操作（重点） 索引操作和列表同理 12arr = np.random.randint(0,100,size=(6,8))arr array([[30, 30, 89, 12, 65, 31, 57, 36], [27, 18, 93, 77, 22, 23, 94, 11], [28, 74, 88, 9, 15, 18, 80, 71], [88, 11, 17, 46, 7, 75, 28, 33], [84, 96, 88, 44, 5, 4, 71, 88], [88, 50, 54, 34, 15, 77, 88, 15]])1arr[1] array([27, 18, 93, 77, 22, 23, 94, 11]) 切片操作 切出前两列数据 切出前两行数据 切出前两行的前两列的数据 数组数据翻转 练习：将一张图片上下左右进行翻转操作 练习：将图片进行指定区域的裁剪 1arr.shape (6, 8)12#切出前两行arr[0:2] array([[30, 30, 89, 12, 65, 31, 57, 36], [27, 18, 93, 77, 22, 23, 94, 11]])12#切出前两列arr[hang,lie]arr[:,0:2] array([[30, 30], [27, 18], [28, 74], [88, 11], [84, 96], [88, 50]])12#切出前两行的前两列的数据arr[0:2,0:2] array([[30, 30], [27, 18]])12#数组数据翻转plt.imshow(img_arr) &lt;matplotlib.image.AxesImage at 0x16eb30833c8&gt; 1img_arr.shape #前两个维度表示的是像素，最后一个维度表示颜色 (426, 640, 3)12#将图片进行上下翻转plt.imshow(img_arr[::-1,:,:]) &lt;matplotlib.image.AxesImage at 0x16eb30de828&gt; 1plt.imshow(img_arr[:,::-1,:]) &lt;matplotlib.image.AxesImage at 0x16eb313b8d0&gt; 1plt.imshow(img_arr[::-1,::-1,::-1]) &lt;matplotlib.image.AxesImage at 0x16eb3198a58&gt; 12#裁剪plt.imshow(img_arr) &lt;matplotlib.image.AxesImage at 0x16eb31f8898&gt; 1plt.imshow(img_arr[50:450,300:750,:]) &lt;matplotlib.image.AxesImage at 0x16eb5164470&gt; 切片汇总： 切行：arr[index1:index3] 切列：arr[行切片,列切片] 翻转：arr[::-1] 变形reshape 变形前和变形后对应的数组元素个数是一致 12arr = np.array([1,2,3,4,5,6])arr array([1, 2, 3, 4, 5, 6])12#将一维数组变形成二维arr.reshape((2,3)) array([[1, 2, 3], [4, 5, 6]])1arr.reshape((-1,2)) array([[1, 2], [3, 4], [5, 6]])级联操作：concatenate 是对numpy数组进行横向或者纵向的拼接 axis轴向的理解 0:列 1：行 12arr1 = np.array([[1,2,3],[4,5,6]])arr1 array([[1, 2, 3], [4, 5, 6]])1np.concatenate((arr1,arr1),axis=1) array([[1, 2, 3, 1, 2, 3], [4, 5, 6, 4, 5, 6]])12arr2 = np.array([[1,2,3,3],[4,5,6,6]])arr2 array([[1, 2, 3, 3], [4, 5, 6, 6]]) 匹配级联 级联的多个数组的形状是一样 不匹配级联 级联的多个数组的形状是不一样（维度必须一样） 多个数组的行数一样进行行级联 多个数组的列数一样进行列级联 12#讲arr1和arr2进行级联np.concatenate((arr1,arr2),axis=1) array([[1, 2, 3, 1, 2, 3, 3], [4, 5, 6, 4, 5, 6, 6]])常用的聚合操作 sum,max,min,mean 12arr = np.random.randint(0,10,size=(4,5))arr array([[6, 6, 5, 6, 0], [0, 6, 9, 1, 8], [9, 1, 2, 8, 9], [9, 5, 0, 2, 7]])1arr.sum(axis=1) array([23, 24, 29, 23])常用的数学函数 NumPy 提供了标准的三角函数：sin()、cos()、tan() numpy.around(a,decimals) 函数返回指定数字的四舍五入值。 参数说明： a: 数组 decimals: 舍入的小数位数。 默认值为0。 如果为负，整数将四舍五入到小数点左侧的位置 1np.sin(arr) array([[-0.2794155 , -0.2794155 , -0.95892427, -0.2794155 , 0. ], [ 0. , -0.2794155 , 0.41211849, 0.84147098, 0.98935825], [ 0.41211849, 0.84147098, 0.90929743, 0.98935825, 0.41211849], [ 0.41211849, -0.95892427, 0. , 0.90929743, 0.6569866 ]])12arr = np.random.random(size=(3,4))arr array([[0.07961309, 0.30545992, 0.33071931, 0.7738303 ], [0.03995921, 0.42949218, 0.31492687, 0.63649114], [0.34634715, 0.04309736, 0.87991517, 0.76324059]])1np.around(arr,decimals=2) array([[0.08, 0.31, 0.33, 0.77], [0.04, 0.43, 0.31, 0.64], [0.35, 0.04, 0.88, 0.76]])常用的统计函数 numpy.amin() 和 numpy.amax()，用于计算数组中的元素沿指定轴的最小、最大值。 numpy.ptp():计算数组中元素最大值与最小值的差（最大值 - 最小值）。 numpy.median() 函数用于计算数组 a 中元素的中位数（中值） 标准差std():标准差是一组数据平均值分散程度的一种度量。 公式：std = sqrt(mean((x - x.mean())**2)) 如果数组是 [1，2，3，4]，则其平均值为 2.5。 因此，差的平方是 [2.25,0.25,0.25,2.25]，并且其平均值的平方根除以 4，即 sqrt(5/4) ，结果为 1.1180339887498949。 方差var()：统计中的方差（样本方差）是每个样本值与全体样本值的平均数之差的平方值的平均数，即 mean((x - x.mean())** 2)。换句话说，标准差是方差的平方根。 12arr = np.random.randint(0,20,size=(5,3))arr array([[12, 18, 17], [17, 16, 0], [ 5, 9, 0], [ 6, 0, 2], [ 3, 3, 18]])1np.amin(arr,axis=0) array([3, 0, 0])1np.ptp(arr,axis=0) array([14, 18, 18])1np.median(arr,axis=0) array([6., 9., 2.])1np.std(arr,axis=0) array([5.16139516, 7.02566723, 8.28492607])1np.var(arr,axis=0) array([26.64, 49.36, 68.64])矩阵相关 NumPy 中包含了一个矩阵库 numpy.matlib，该模块中的函数返回的是一个矩阵，而不是 ndarray 对象。一个 的矩阵是一个由行（row）列（column）元素排列成的矩形阵列。 matlib.empty() 函数返回一个新的矩阵，语法格式为：numpy.matlib.empty(shape, dtype)，填充为随机数据 参数介绍： shape: 定义新矩阵形状的整数或整数元组 Dtype: 可选，数据类型 12import numpy.matlib as matlibmatlib.empty(shape=(4,5)) matrix([[-0.2794155 , -0.2794155 , -0.95892427, -0.2794155 , 0. ], [ 0. , -0.2794155 , 0.41211849, 0.84147098, 0.98935825], [ 0.41211849, 0.84147098, 0.90929743, 0.98935825, 0.41211849], [ 0.41211849, -0.95892427, 0. , 0.90929743, 0.6569866 ]]) numpy.matlib.zeros()，numpy.matlib.ones()返回填充为0或者1的矩阵 12 numpy.matlib.eye() 函数返回一个矩阵，对角线元素为 1，其他位置为零。 numpy.matlib.eye(n, M,k, dtype) n: 返回矩阵的行数 M: 返回矩阵的列数，默认为 n k: 对角线的索引 dtype: 数据类型 1matlib.eye(5,5,1) matrix([[0., 1., 0., 0., 0.], [0., 0., 1., 0., 0.], [0., 0., 0., 1., 0.], [0., 0., 0., 0., 1.], [0., 0., 0., 0., 0.]]) numpy.matlib.identity() 函数返回给定大小的单位矩阵。单位矩阵是个方阵，从左上角到右下角的对角线（称为主对角线）上的元素均为 1，除此以外全都为 0。 1matlib.identity(6) matrix([[1., 0., 0., 0., 0., 0.], [0., 1., 0., 0., 0., 0.], [0., 0., 1., 0., 0., 0.], [0., 0., 0., 1., 0., 0.], [0., 0., 0., 0., 1., 0.], [0., 0., 0., 0., 0., 1.]]) 转置矩阵 .T 12arr = matlib.identity(6)arr matrix([[1., 0., 0., 0., 0., 0.], [0., 1., 0., 0., 0., 0.], [0., 0., 1., 0., 0., 0.], [0., 0., 0., 1., 0., 0.], [0., 0., 0., 0., 1., 0.], [0., 0., 0., 0., 0., 1.]])12a = np.array([[1,2,3],[4,5,6]])a array([[1, 2, 3], [4, 5, 6]])1a.T array([[1, 4], [2, 5], [3, 6]]) 矩阵相乘 numpy.dot(a, b, out=None) a : ndarray 数组 b : ndarray 数组 第一个矩阵第一行的每个数字（2和1），各自乘以第二个矩阵第一列对应位置的数字（1和1），然后将乘积相加（ 2 x 1 + 1 x 1），得到结果矩阵左上角的那个值3。也就是说，结果矩阵第m行与第n列交叉位置的那个值，等于第一个矩阵第m行与第二个矩阵第n列，对应位置的每个值的乘积之和。 线性代数基于矩阵的推导： https://www.cnblogs.com/alantu2018/p/8528299.html 123arr_1 = np.array([[1,2,3],[4,5,6]]) #2行3列arr_2 = np.array([[1,2,3],[4,5,6]]) arr_2 = arr_2.T 1arr_1 array([[1, 2, 3], [4, 5, 6]])1arr_2 array([[1, 4], [2, 5], [3, 6]])1np.dot(arr_1,arr_2) array([[14, 32], [32, 77]])","link":"/2020/01/13/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-1-numpy%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Django","slug":"Django","link":"/tags/Django/"},{"name":"数据分析","slug":"数据分析","link":"/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"categories":[{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Django","slug":"Python/Django","link":"/categories/Python/Django/"},{"name":"数据分析","slug":"数据分析","link":"/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}]}